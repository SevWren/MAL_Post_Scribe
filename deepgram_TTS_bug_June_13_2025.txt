

**Bug Report: Deepgram Speech-to-Text Connection Error**

**Bug Title:** Deepgram setup/connection error: TypeError: url.startsWith is not a function
**Date Reported:** June 13, 2025
**Last Updated Based on Code Review:** June 13, 2025 (Reflecting user-provided file state)
**Affected Component(s):** 
- `components/hooks/useDeepgramTranscription.ts` (primary logic)
- `components/AiInteractionModal.tsx` (integrates the hook)
**Environment:** Web browser, using `@deepgram/sdk@^3.3.5` via `esm.sh` CDN.

**Error Message & Stack Trace (Typical):**
```
Deepgram setup/connection error: TypeError: url.startsWith is not a function
    at new createWebSocket (<anonymous_module_path>/@deepgram/sdk@3.3.5/dist/node/listen/AbstractLiveClient.js:...)
    at J.connect (<anonymous_module_path>/@deepgram/sdk@3.3.5/dist/node/listen/AbstractLiveClient.js:...)
    at new J (<anonymous_module_path>/@deepgram/sdk@3.3.5/dist/node/listen/ListenLiveClient.js:...)
    at F.live (<anonymous_module_path>/@deepgram/sdk@3.3.5/dist/node/listen/ListenClient.js:...)
    at toggleRecording (components/hooks/useDeepgramTranscription.ts:...) 
```
*(Note: Stack trace paths are illustrative of SDK internal calls.)*

**Problem Description:**
When attempting to initialize a live transcription connection with Deepgram, the SDK throws a `TypeError` because the internal `createWebSocket` function tries to call the `.startsWith()` method on a variable that is not a string. This typically occurs when the `url` variable, expected to hold the WebSocket endpoint, is `undefined`. The root cause is usually the SDK's inability to automatically determine its default API endpoint in certain browser/module-loading environments.

The error occurs within the `toggleRecording` async function in `useDeepgramTranscription.ts`, specifically after the `createClient` call when `deepgram.listen.live(...)` is invoked, which then tries to establish the WebSocket connection.

**Steps to Reproduce (If error were present):**
1. Ensure the application is loaded in a web browser with the version of code *prior* to the `global.url` fix.
2. Open the AI modal from MAL Post Scribe.
3. Click the "Record Audio" button.
4. The error message "Deepgram setup/connection error: TypeError: url.startsWith is not a function" would appear in the UI status area, and a more detailed error logged to the browser console.

**Analysis & Investigation So Far:**
*(The following points describe fixes and checks that are confirmed to be present in the current version of `components/hooks/useDeepgramTranscription.ts` as per the last full code review on June 13, 2025.)*

1.  **Initial Hypothesis:** The Deepgram SDK was not correctly resolving its base API URL internally when loaded via `esm.sh` in the browser, leading to an `undefined` URL being passed to its WebSocket connection logic.

2.  **Primary Fix Attempt (Implemented and Verified in Current Code):**
    *   **Action:** Explicitly provided the global API endpoint URL to the Deepgram SDK during client initialization.
    *   **Code in `components/hooks/useDeepgramTranscription.ts` (line 166 in provided file):**
        ```typescript
        const deepgram = createClient(DEEPGRAM_API_KEY, {
          global: { url: 'https://api.deepgram.com' } 
        });
        ```
    *   **Rationale:** This ensures the SDK has a valid string base URL (`https://api.deepgram.com`) to construct the full WebSocket URL (e.g., `wss://api.deepgram.com/v1/listen`). This is the standard recommended solution for this specific error when using the SDK in browser environments.

3.  **Review of Deepgram API Documentation:**
    *   The provided API documentation confirms the WebSocket endpoint is `wss://api.deepgram.com/v1/listen`.
    *   Authentication and query parameter usage (e.g., `model`, `language`, `smart_format`) within the SDK align with the API reference.
    *   This review validated that `https://api.deepgram.com` is the correct base URL.

4.  **Related Type Corrections and SDK Usage Adjustments (Implemented and Verified in Current Code):**
    *   **`utterance_end_ms` type:** The value for `utterance_end_ms` in `deepgram.listen.live` options has been set to a number `1000` to match the SDK's expected type.
        *   Code in `components/hooks/useDeepgramTranscription.ts` (line 172 in provided file):
            ```typescript
            const connection = deepgram.listen.live({
              // ... other options
              utterance_end_ms: 1000, // Confirmed as number
            });
            ```
    *   **`LiveCloseEvent` Typing:** The `event` parameter in the `LiveTranscriptionEvents.Close` handler is correctly typed using `LiveCloseEvent` imported from `@deepgram/sdk`. This ensures `event.code` is correctly treated as a `number` according to the SDK's event type.
        *   Code in `components/hooks/useDeepgramTranscription.ts` (lines 9 & 203 in provided file):
            ```typescript
            import { createClient, LiveClient, LiveTranscriptionEvents, LiveCloseEvent } from '@deepgram/sdk';
            // ...
            connection.on(LiveTranscriptionEvents.Close, (event: LiveCloseEvent) => {
              // ... event.code is now correctly typed as number
            });
            ```

5.  **Consideration of Environmental Factors (If error persists despite the implemented fix):**
    *   **Browser Cache:** The most likely culprit if the error is still observed is the browser executing an outdated version of the JavaScript files. Clearing the browser cache and performing a hard refresh (Ctrl+Shift+R or Cmd+Shift+R) is recommended.
    *   **Build/Deployment Issues:** If any build process is involved, ensuring it correctly bundles and deploys the latest version of `useDeepgramTranscription.ts` is crucial.
    *   **SDK Version/CDN Anomaly:** While the `global.url` fix is robust, a very remote possibility of an issue specific to `@deepgram/sdk@^3.3.5` when served via `esm.sh` exists, though this is less likely.

**Current Status:**
The primary and standard fix for the "url.startsWith is not a function" error, which involves explicitly setting `global: { url: 'https://api.deepgram.com' }` during Deepgram client creation, **is confirmed to be implemented in the current codebase** (specifically in `components/hooks/useDeepgramTranscription.ts` as of the June 13, 2025 file review). Related SDK usage improvements, such as type corrections for event handlers and options, have also been addressed and are present in the code.

If this error continues to manifest, it is strongly suspected to be due to environmental factors (most notably browser caching of stale code) rather than a deficiency in the current code's approach to resolving this specific connection issue.

**Next Steps (If Error Persists Despite the Current Code):**
1.  **Verify Code Execution:** Double-check that the browser is indeed running the latest version of `components/hooks/useDeepgramTranscription.ts` which includes the `global.url` fix. This can be done using browser developer tools (Sources tab).
2.  **Isolate SDK Call:** As a diagnostic step, temporarily simplify the `toggleRecording` function to *only* include the `createClient` call (with the `global.url` option) and a basic `connection.on(LiveTranscriptionEvents.Open, () => console.log('Deepgram connected'))`. This would confirm if the error occurs at the most fundamental point of SDK initialization/connection.
3.  **Test Different SDK Patch Version:** Consider testing a slightly different patch version of `@deepgram/sdk` (e.g., specific `3.3.x`) from `esm.sh` if a CDN-specific issue is suspected.
4.  **Network Inspection:** Use browser developer tools (Network tab, filtering for WebSockets) to observe connection attempts to Deepgram. This might reveal if any URL is being attempted or if the connection fails before that.
5.  **Microphone Permissions (Unlikely related to this specific error, but general check):** Ensure microphone permissions are consistently granted and that there are no OS-level restrictions. The current `metadata.json` correctly requests `"microphone"` permission.